-LOCALISATION:
	http://192.168.56.101/index.php?page=searchimg	

-Description:

En y tapant un caractère spécial, le site nous affichera une erreur SQL, ce qui
nous prouve que le champ de texte est vulnérable aux injections SQL.

Etant donné que le champ attend en temps normal un caractère numérique (un id), afin de
retourner l'ID, le first name et le surname d'un utilisateur, on peut en déduire
que le serveur effectue la requête SQL suivante :

	SELECT title, url FROM [table] WHERE ID = '[valeur de l'input]';

Dans ce cas, il suffit de spécifier n'importe quel identifiant (pour l'exemple,
nous utiliserons -1) suivi de l'instruction "OR 1=1" (donc true) pour
que la requête SQL soit valide pour chacune des entrées de la table. Nous entrons
donc :

	-1 OR 1=1

Parmis les images retournées, nous obtenons celle-ci :

	ID: -1 OR 1=1 Title: Hack me ? Url : borntosec.ddns.net/images.png

Il va donc falloir obtenir d'autres informations concernant ce user, et plus
globalement sur la manière dont sont stockées les données de la DB. Pour cela,
nous pouvons simplement ajouter d'autres instructions à notre injection grâce au
mot-clé "UNION". Nous pouvons donc injecter le code suivant :

	-1 UNION SELECT table_name, NULL FROM information_schema.tables;

"information_schema" est une table qui contient d'autres tables afin de stocker
les informations de la DB. Nous accédons à la table "tables" qui contenant les
infos des autres tables de la db.

"table_name" est une colonne de la table "tables". Elle stocke les noms des tables

Nous ajoutons ", NULL" car la requête prévoit de retourner les résultats de 2
colonnes (initialement first_name et surname, que nous remplaçons donc par
table_name et NULL (pour le moment)).

Parmis les noms de tables retournés, nous trouvons la table "list_images". Nous devons
désormais trouver comment est organisée cette table. Pour ça, nous allons
récupérer les noms de colonnes existantes de la db, et vérifier lesquelles
appartiennent à la table "list_images" avec l'instruction suivante :

	-1 UNION SELECT table_name, column_name FROM information_schema.columns

CTRL + F pour chercher "list_images" dans les résultats et nous obtenons ceci :

	Title: id
	Title: url
	Title: title
	Title: comment

(il y a sûrement une commande pour se passer du CTRL + F)

Nous savons maintenant qu'une image possède ces données. Nous n'avons plus qu'à les
consulter pour notre fameux "Hack me" du début, en commençant par obtenir
son id.

	-1 UNION SELECT id, title FROM list_images --->>>

	ID: -1 UNION SELECT id, title FROM list_images
	Title: Hack me ?
	Url : 5

Puis :

	5 UNION SELECT comment, NULL FROM list_images
	5 UNION SELECT planet, Commentaire FROM users
	5 UNION SELECT countersign, NULL FROM users

	--->>>

	ID: 5 UNION SELECT comment, NULL FROM list_images 
	Title: 
	Url : If you read this just use this md5 decode lowercase then sha256 to win this flag ! : 1928e8083cf461a51303633093573c46

	Le code contenu dans le commentaire est chiffré en MD5. Après déchiffrement, nous
	obtenons "albatroz". On le met en minuscules puis on l'encode en Sh256, ce qui
	nous donne le flag.

Comment resoudre:
	Il faut preparer a l'avance les requetes SQL faites au serveur, et nettoyer les donnees du user avant de les injecter